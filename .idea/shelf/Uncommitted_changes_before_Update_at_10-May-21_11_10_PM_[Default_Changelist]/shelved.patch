Index: Classes/Narrador.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\r\n\r\nimport pygame.font\r\n\r\nfrom Constantes import *\r\n\r\n\r\nclass Narrador(object):\r\n    def __init__(self, jugador1, jugador2):\r\n        \"\"\"\r\n        Se encarga de \"dirigir\" la partida. Reparte las cartas, gestiona los turnos, generación de recursos, eventos\r\n        aleatorios, etc.\r\n\r\n        :param jugador1: Objeto Jugador. Jugador 1, tipicamente el unico humano\r\n        :param jugador2: Objeto Jugador. Jugador 2, tipicamente la IA\r\n        \"\"\"\r\n        self.turno = 0\r\n        self.jugadores = [jugador1, jugador2]\r\n\r\n    def Opuesto(self):\r\n        \"\"\"\r\n        Devuelve el turno opuesto, i.e. 0 -> 1 | 1 -> 0\r\n        \"\"\"\r\n        return abs(self.turno - 1)\r\n\r\n    def IniciarPartida(self):\r\n        \"\"\"\r\n        Escoje aleatoramente quien empieza.\r\n        \"\"\"\r\n        if random.choice([True, False]):\r\n            self.turno = 0\r\n        else:\r\n            self.turno = 1\r\n\r\n    def CambiarTurno(self):\r\n        \"\"\"\r\n        Cambia el turno de un jugador al otro.\r\n        \"\"\"\r\n        self.turno = self.Opuesto()\r\n\r\n    def GenerarRecursos(self):\r\n        \"\"\"\r\n        Genera los recursos que corresponden.\r\n        \"\"\"\r\n        self.jugadores[self.turno].ladrillos += self.jugadores[self.turno].constructores\r\n        self.jugadores[self.turno].espadas += self.jugadores[self.turno].soldados\r\n        self.jugadores[self.turno].mana += self.jugadores[self.turno].magos\r\n\r\n    def JugarTurno(self, carta, jugar=True):\r\n        \"\"\"\r\n        Llevará a cabo la acción escogida por el jugador activo.\r\n\r\n        Jugar o descartar una carta, basicamente.\r\n\r\n        :param carta: Objeto Carta. Carta jugada\r\n        :param jugar: Boolean. Jugamos o no la carta? False es descartar\r\n        \"\"\"\r\n\r\n        if jugar:\r\n            # Vemos cuantos recursos y de que tipo se gastan, y luego los restamos al jugador activo\r\n            recurso = diccionario_cartas[carta.id][0][1]\r\n            cantidad_recurso = diccionario_cartas[carta.id][0][0]\r\n            self.jugadores[self.turno].Set(recurso, self.jugadores[self.turno].Get(recurso) - cantidad_recurso)\r\n\r\n            # Vemos el atributo objetivo, y la cantidad a modificar.\r\n            # Según la cantidad afectamos al jugador activo o al oponente\r\n            objetivo = diccionario_cartas[carta.id][1][1]\r\n            cantidad_objetivo = diccionario_cartas[carta.id][1][0]\r\n            # Cantidad positiva. El efecto es para uno mismo.\r\n            if cantidad_objetivo > 0:\r\n                self.jugadores[self.turno].Set(objetivo,\r\n                                               clamp(self.jugadores[self.turno].Get(objetivo) + cantidad_objetivo))\r\n            # Cantidad negativa. El efecto es para el oponente.\r\n            else:\r\n                if objetivo == \"hp_muralla\" and self.jugadores[self.Opuesto()].Get(\"hp_muralla\") == 0:\r\n                    objetivo = \"hp_castillo\"\r\n                self.jugadores[self.Opuesto()].Set(objetivo, clamp(self.jugadores[self.Opuesto()].Get(objetivo) +\r\n                                                                   cantidad_objetivo))\r\n\r\n        # Quitamos la carta de la mano del jugador activo\r\n        self.jugadores[self.turno].mano.remove(carta.id)\r\n        self.jugadores[self.turno].CogerUnaCarta()\r\n        self.CambiarTurno()\r\n        self.GenerarRecursos()\r\n        self.CalculoIA()\r\n        self.jugadores[self.turno].ComprobarTodasCartas()\r\n\r\n    def ComprobarPartida(self):\r\n        \"\"\"\r\n        Comprueba si la partida ha acabado.\r\n\r\n        0 -> Partida no acabada\r\n\r\n        1 -> Jugador1.hp_castillo <= 0\r\n\r\n        2 -> Jugador1.hp_castillo >= 100\r\n\r\n        3 -> Jugador2.hp_castillo <= 0\r\n\r\n        4 -> Jugador2.hp_castillo >= 100\r\n        \"\"\"\r\n        if self.jugadores[0].hp_castillo <= 0:\r\n            return 1\r\n        elif self.jugadores[0].hp_castillo >= 100:\r\n            return 2\r\n        elif self.jugadores[1].hp_castillo <= 0:\r\n            return 3\r\n        elif self.jugadores[1].hp_castillo >= 100:\r\n            return 4\r\n        else:\r\n            return 0\r\n\r\n    # No discrimina entre click izquierdo o derecho\r\n    def DetectarClickCarta(self, pos):\r\n        \"\"\"\r\n        Detecta cual carta ha sido clickeada, y actua en consecuencia\r\n\r\n        :param pos: Lista. Coordenadas donde se ha hecho click. [x, y]\r\n        \"\"\"\r\n        for carta in self.jugadores[self.turno].cartas:\r\n            if carta.coord[0] < pos[0] < carta.coord[0] + self.jugadores[self.turno].imagenes[\"muralla1\"][0].get_width() \\\r\n                    and carta.coord[1] < pos[1] < carta.coord[1] + \\\r\n                    self.jugadores[self.turno].imagenes[\"muralla1\"][0].get_height():\r\n                self.JugarTurno(carta, carta.estado)\r\n                return\r\n\r\n    def CalculoIA(self):\r\n        \"\"\"\r\n        La IA escoge la mejor carta\r\n        \"\"\"\r\n        ponderacion = {}\r\n        print(\"Jugador: \", self.turno)\r\n        for carta in self.jugadores[self.turno].cartas:\r\n            nota = 0\r\n\r\n            # Preservación\r\n            if self.jugadores[self.turno].hp_muralla < 10:\r\n                # Urge construir muralla\r\n                pass\r\n            elif self.jugadores[self.turno].hp_muralla < 40:\r\n                # Urge menos construir muralla\r\n                pass\r\n            else:\r\n                # No urge menos construir muralla\r\n                pass\r\n            if self.jugadores[self.turno].hp_castillo < 30:\r\n                # Urge construir muralla\r\n                pass\r\n            elif self.jugadores[self.turno].hp_castillo < 60:\r\n                # Urge menos construir muralla\r\n                pass\r\n            else:\r\n                # No urge menos construir muralla\r\n                pass\r\n\r\n            # Comparación\r\n\r\n            # Comparamos nuestra muralla con la enemiga.\r\n            if diccionario_cartas[carta.id][1][0] > 0 and diccionario_cartas[carta.id][1][1] == \"hp_muralla\":\r\n                # La carta construye muralla\r\n                if (self.jugadores[self.turno].hp_muralla - self.jugadores[self.Opuesto()].hp_muralla) > 20:\r\n                    # Tenemos bastante margen, no corre prisa construir mas muralla\r\n                    pass\r\n                elif (self.jugadores[self.turno].hp_muralla - self.jugadores[self.Opuesto()].hp_muralla) > 0:\r\n                    # Tenemos algo de margen, no corre prisa construir mas muralla\r\n                    pass\r\n                elif (self.jugadores[self.turno].hp_muralla - self.jugadores[self.Opuesto()].hp_muralla) > -20:\r\n                    # Tenemos algo de desventaja, considerar recuperarla\r\n                    pass\r\n            elif diccionario_cartas[carta.id][1][0] < 0 and diccionario_cartas[carta.id][1][1] == \"hp_muralla\":\r\n                # La carta ataca la muralla enemiga\r\n                if (self.jugadores[self.turno].hp_muralla - self.jugadores[self.Opuesto()].hp_muralla) > 20:\r\n                    # Tenemos bastante margen, no corre prisa construir mas muralla\r\n                    pass\r\n                elif (self.jugadores[self.turno].hp_muralla - self.jugadores[self.Opuesto()].hp_muralla) > 0:\r\n                    # Tenemos algo de margen, no corre prisa construir mas muralla\r\n                    pass\r\n                elif (self.jugadores[self.turno].hp_muralla - self.jugadores[self.Opuesto()].hp_muralla) > -20:\r\n                    # Tenemos algo de desventaja, considerar recuperarla\r\n                    pass\r\n\r\n            # Comparamos nuestro castillo con el enemigo.\r\n            if diccionario_cartas[carta.id][1][0] > 0 and diccionario_cartas[carta.id][1][1] == \"hp_castillo\":\r\n                # La carta construye castillo\r\n                if (self.jugadores[self.turno].hp_castillo - self.jugadores[self.Opuesto()].hp_castillo) > 30:\r\n                    # Tenemos bastante margen, no corre prisa construir mas castillo\r\n                    pass\r\n                elif (self.jugadores[self.turno].hp_castillo - self.jugadores[self.Opuesto()].hp_castillo) > 0:\r\n                    # Tenemos algo de margen, no corre prisa construir mas castillo\r\n                    pass\r\n                elif (self.jugadores[self.turno].hp_castillo - self.jugadores[self.Opuesto()].hp_castillo) > -10:\r\n                    # Tenemos algo de desventaja, considerar recuperarla\r\n                    pass\r\n            elif diccionario_cartas[carta.id][1][0] < 0 and diccionario_cartas[carta.id][1][1] == \"hp_castillo\":\r\n                # La carta ataca el castillo enemigo\r\n                if (self.jugadores[self.turno].hp_castillo - self.jugadores[self.Opuesto()].hp_castillo) > 30:\r\n                    # Tenemos bastante margen, no corre prisa construir mas castillo\r\n                    pass\r\n                elif (self.jugadores[self.turno].hp_castillo - self.jugadores[self.Opuesto()].hp_castillo) > 0:\r\n                    # Tenemos algo de margen, no corre prisa construir mas castillo\r\n                    pass\r\n                elif (self.jugadores[self.turno].hp_castillo - self.jugadores[self.Opuesto()].hp_castillo) > -10:\r\n                    # Tenemos algo de desventaja, considerar recuperarla\r\n                    pass\r\n\r\n            # Miramos de ir tener mas generadores que el oponente\r\n            # Afecta solo a cartas que manejen generadores. 50% de la nota\r\n            if carta.id == \"constructores_amigos\":\r\n                if (self.jugadores[self.turno].constructores - self.jugadores[self.Opuesto()].constructores) < -1:\r\n                    # No queremos tener demasiada desventaja\r\n                    nota += 5\r\n                elif (self.jugadores[self.turno].constructores - self.jugadores[self.Opuesto()].constructores) < 0:\r\n                    # No queremos tener desventaja\r\n                    nota += 3\r\n                elif (self.jugadores[self.turno].constructores - self.jugadores[self.Opuesto()].constructores) < 1:\r\n                    # Algo de ventaja siempre está bien\r\n                    nota += 1\r\n                else:\r\n                    # Demasiada ventaja no es una prioridad\r\n                    nota += 0\r\n            if carta.id == \"soldados_amigos\":\r\n                if (self.jugadores[self.turno].soldados - self.jugadores[self.Opuesto()].soldados) < -1:\r\n                    # No queremos tener demasiada desventaja\r\n                    nota += 5\r\n                elif (self.jugadores[self.turno].soldados - self.jugadores[self.Opuesto()].soldados) < 0:\r\n                    # No queremos tener desventaja\r\n                    nota += 3\r\n                elif (self.jugadores[self.turno].soldados - self.jugadores[self.Opuesto()].soldados) < 1:\r\n                    # Algo de ventaja siempre está bien\r\n                    nota += 1\r\n                else:\r\n                    # Demasiada ventaja no es una prioridad\r\n                    nota += 0\r\n            if carta.id == \"magos_amigos\":\r\n                if (self.jugadores[self.turno].magos - self.jugadores[self.Opuesto()].magos) < -1:\r\n                    # No queremos tener demasiada desventaja\r\n                    nota += 5\r\n                elif (self.jugadores[self.turno].magos - self.jugadores[self.Opuesto()].magos) < 0:\r\n                    # No queremos tener desventaja\r\n                    nota += 3\r\n                elif (self.jugadores[self.turno].magos - self.jugadores[self.Opuesto()].magos) < 1:\r\n                    # Algo de ventaja siempre está bien\r\n                    nota += 1\r\n                else:\r\n                    # Demasiada ventaja no es una prioridad\r\n                    nota += 0\r\n\r\n            # Hostilidad\r\n            # Afecta a todas las cartas de ataque. 75% de la nota\r\n\r\n            # Comprobamos si matamos el enemigo. 50%\r\n            if (diccionario_cartas[carta.id][1][0] < 0 and diccionario_cartas[carta.id][1][1] == \"hp_castillo\") or (\r\n                    diccionario_cartas[carta.id][1][0] < 0 and diccionario_cartas[carta.id][1][1] == \"hp_muralla\" and\r\n                    self.jugadores[self.Opuesto()].Get(\"hp_muralla\") == 0):\r\n                if (self.jugadores[self.Opuesto()].hp_castillo - diccionario_cartas[carta.id][1][0]) < 0:\r\n                    # Destruimos el castillo enemigo. MVP\r\n                    nota += 5\r\n                elif (self.jugadores[self.Opuesto()].hp_castillo - diccionario_cartas[carta.id][1][0]) < 5:\r\n                    # Practicamente destruimos el castillo enemigo.\r\n                    nota += 4\r\n                elif (self.jugadores[self.Opuesto()].hp_castillo - diccionario_cartas[carta.id][1][0]) < 15:\r\n                    # Casi destruimos el castillo enemigo.\r\n                    nota += 2.5\r\n                elif (self.jugadores[self.Opuesto()].hp_castillo - diccionario_cartas[carta.id][1][0]) < 50:\r\n                    # El castillo enemigo corre poco peligro.\r\n                    nota += 1\r\n                else:\r\n                    # El castillo no corre ningún peligro.\r\n                    nota += 0\r\n\r\n            # Priorizamos las cartas que hacen mas daño. 25%\r\n            if diccionario_cartas[carta.id][1][0] < 0 and (diccionario_cartas[carta.id][1][1] == \"hp_castillo\"\r\n                                                           or diccionario_cartas[carta.id][1][1] == \"hp_muralla\"):\r\n                if diccionario_cartas[carta.id][1][0] >= -2:\r\n                    # Hace poco daño\r\n                    nota += 0\r\n                elif diccionario_cartas[carta.id][1][0] >= -4:\r\n                    # Hace algo de daño\r\n                    nota += 0.5\r\n                elif diccionario_cartas[carta.id][1][0] >= -15:\r\n                    # Hace bastante daño\r\n                    nota += 1.5\r\n                else:\r\n                    # Hace muchisimo daño\r\n                    nota = 2.5\r\n\r\n            # Quizas añadir un control para intentar mantener la muralla enemiga en valores no excesivos\r\n\r\n            # Longevidad\r\n\r\n            # Miramos de ir consiguiendo generadores a lo largo de la partida\r\n            # Afecta solo a cartas que manejen generadores. 25% de la nota\r\n            if carta.id == \"constructores_amigos\":\r\n                if self.turno_jugados < 5 and self.jugadores[self.turno].constructores < 5:\r\n                    # Urgen mas generadores\r\n                    nota += 2.5\r\n                elif self.turno_jugados < 10 and self.jugadores[self.turno].constructores < 8:\r\n                    # No urgen tanto los generadores\r\n                    nota += 1\r\n                elif self.jugadores[self.turno].constructores < 8:\r\n                    # Realemente nos dan igual los generadores\r\n                    nota += 0.5\r\n                else:\r\n                    nota += 0\r\n            if carta.id == \"soldados_amigos\":\r\n                if self.turno_jugados < 5 and self.jugadores[self.turno].soldados < 5:\r\n                    # Urgen mas generadores\r\n                    nota += 2.5\r\n                elif self.turno_jugados < 10 and self.jugadores[self.turno].soldados < 8:\r\n                    # No urgen tanto los generadores\r\n                    nota += 1\r\n                elif self.jugadores[self.turno].soldados < 8:\r\n                    # Realemente nos dan igual los generadores\r\n                    nota += 0.5\r\n                else:\r\n                    nota += 0\r\n            if carta.id == \"magos_amigos\":\r\n                if self.turno_jugados < 5 and self.jugadores[self.turno].magos < 5:\r\n                    # Urgen mas generadores\r\n                    nota += 2.5\r\n                elif self.turno_jugados < 10 and self.jugadores[self.turno].magos < 8:\r\n                    # No urgen tanto los generadores\r\n                    nota += 1\r\n                elif self.jugadores[self.turno].magos < 8:\r\n                    # Realemente nos dan igual los generadores\r\n                    nota += 0.5\r\n                else:\r\n                    nota += 0\r\n\r\n            # Costes/Beneficios\r\n            # Afecta a todas las cartas. 25% de la nota\r\n            if (self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]) - diccionario_cartas[carta.id][0][\r\n                0]) < 5:\r\n                # Esta carta gasta te deja con muy poca cantidad de sus recursos\r\n                nota += clamp(((self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]) -\r\n                                diccionario_cartas[carta.id][0][0]) / 4), 0, 100) * 1\r\n            elif (self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]) - diccionario_cartas[carta.id][0][\r\n                0]) < 10:\r\n                # Esta carta gasta te deja con poca cantidad de sus recursos\r\n                nota += clamp(\r\n                    (self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]) -\r\n                     diccionario_cartas[carta.id][0][\r\n                         0] / 9)) * 1\r\n            elif (self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]) - diccionario_cartas[carta.id][0][\r\n                0]) < 15:\r\n                # Esta carta gasta te deja con un poquillo de sus recursos\r\n                nota += clamp(\r\n                    (self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]) -\r\n                     diccionario_cartas[carta.id][0][\r\n                         0] / 14)) * 2\r\n            else:\r\n                # Los recursos no peligran con estos recursos\r\n                nota += 2.5\r\n            print(\"Carta: \", carta.id, \" Nota: \", nota)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classes/Narrador.py b/Classes/Narrador.py
--- a/Classes/Narrador.py	(revision 43f2528330fd2013dcd42ac617a4a914403e6e57)
+++ b/Classes/Narrador.py	(date 1620668571509)
@@ -132,6 +132,7 @@
         print("Jugador: ", self.turno)
         for carta in self.jugadores[self.turno].cartas:
             nota = 0
+            # print("Carta antes: ", carta.id, " Nota: ", nota)
 
             # Preservación
             if self.jugadores[self.turno].hp_muralla < 10:
@@ -334,21 +335,27 @@
                 # Esta carta gasta te deja con muy poca cantidad de sus recursos
                 nota += clamp(((self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]) -
                                 diccionario_cartas[carta.id][0][0]) / 4), 0, 100) * 1
+                # print("Nota C/B 1: ", nota)
+                # print(self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]), "-",
+                #      diccionario_cartas[carta.id][0][0])
             elif (self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]) - diccionario_cartas[carta.id][0][
                 0]) < 10:
                 # Esta carta gasta te deja con poca cantidad de sus recursos
-                nota += clamp(
-                    (self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]) -
-                     diccionario_cartas[carta.id][0][
-                         0] / 9)) * 1
+                nota += clamp(((self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]) -
+                                diccionario_cartas[carta.id][0][0]) / 9), 0, 100) * 1
+                # print("Nota C/B 2: ", nota)
+                # print(self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]), "-",
+                #     diccionario_cartas[carta.id][0][0])
             elif (self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]) - diccionario_cartas[carta.id][0][
                 0]) < 15:
                 # Esta carta gasta te deja con un poquillo de sus recursos
-                nota += clamp(
-                    (self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]) -
-                     diccionario_cartas[carta.id][0][
-                         0] / 14)) * 2
+                nota += clamp(((self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]) -
+                                diccionario_cartas[carta.id][0][0]) / 14), 0, 100) * 2
+                # print("Nota C/B 3: ", nota)
+                # print(self.jugadores[self.turno].Get(diccionario_cartas[carta.id][0][1]), "-",
+                #      diccionario_cartas[carta.id][0][0])
             else:
                 # Los recursos no peligran con estos recursos
                 nota += 2.5
             print("Carta: ", carta.id, " Nota: ", nota)
+            # print("\n")
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.9 (Environments)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 43f2528330fd2013dcd42ac617a4a914403e6e57)
+++ b/.idea/misc.xml	(date 1620489761176)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (Environments)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7 (PRE)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/Test2.1.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/Assets\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/Classes\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.9 (Environments)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Test2.1.iml b/.idea/Test2.1.iml
--- a/.idea/Test2.1.iml	(revision 43f2528330fd2013dcd42ac617a4a914403e6e57)
+++ b/.idea/Test2.1.iml	(date 1620489761170)
@@ -5,7 +5,7 @@
       <sourceFolder url="file://$MODULE_DIR$/Assets" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/Classes" isTestSource="false" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.9 (Environments)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.7 (PRE)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
